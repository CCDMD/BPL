##DESCRIPTION
## Voir le commentaire
## 
##ENDDESCRIPTION

## DBsubject(Calcul différentiel et intégral d'une variable)
## DBchapter(Applications de la limite et de la dérivée)
## KEYWORDS('fonction polynomiale', 'graphique', 'maximum', 'minimum', 'tracé de courbes')
## Author('Jean-Philippe Villeneuve')
## Institution('Cégep de Rimouski')
## Level(2)
## Language(fr)

DOCUMENT();
loadMacros(
  "PGstandard.pl",
"MathObjects.pl", "PGgraphmacros.pl",
"PGcourse.pl","unionTables.pl","parserPopUp.pl","PGchoicemacros.pl"
);

COMMENT("Niveau de difficulté: Facile. Fonction quadratique ax^2+bx+c avec deux zéros distincts");

TEXT(beginproblem());
$refreshCachedImages = 1;

#Cas 3: Fonction quadratique ax^2+bx+c avec deux zéros distincts
#Les valeurs à remplacer sont 60, 61, 62, 63, 64, 65

#Choix du a et de l'axe des x
$a61_temp=non_zero_random(-8, 8);
$a62_temp=non_zero_random(-8, 8);
#Problème d'affichage lorsque les deux valeurs sont proches. 
if (abs($a61_temp) == abs($a62_temp)) {$a61 =-5; $a62 = list_random(-1,1,3, 7);}
elsif( abs($a61_temp -$a62_temp) < 3)  
{$a61 =-6; $a62 = list_random(-2,2,4);}
else
{$a61 =min($a61_temp,$a62_temp) ;
$a62 =max($a61_temp,$a62_temp);}

#Intervalle en x pour f60 et f61
$x61=min(Compute("$a61 - 3"), -2);
$x62=max(Compute("$a62+3"), 2);

#intervalle en x pour f62, f63
$x611temp = min( -1*$a61,-1*$a62);
$x621temp = max( -1*$a61,-1*$a62);
 $x611=min(Compute("$x611temp - 3"), -2);
$x621=max(Compute("$x621temp+3"), 2);

#Les fonctions
$b600 = list_random(-5,-4,-3,-2,2,3,4,5);
$b601 = Compute("-1*$b600*($a61+$a62)");
$b602 = Compute("$b600*$a61*$a62");
$b603 = non_zero_random(-8, 8);

$f60 = Formula("$b600*x^2+$b601*x + $b602")-> reduce;
$f61 = Formula("-1*$b600*(x - $a61)*(x - $a62)")-> reduce;
$f62 = Formula("$b600*(x + $a61)*(x + $a62)")-> reduce;
$f63 = Formula("-1*$b600*(x + $a61)*(x + $a62)")-> reduce;

#Recherche des extrémums
$m61 = Compute("($a61+$a62)/2");
$f60m61 = $f60->eval(x=>$m61);
$f61m61 = $f61->eval(x=>$m61);
$f62m61 = $f62->eval(x=>(-1*$m61));
$f63m61 = $f63->eval(x=>(-1*$m61));

$f60mintemp = Compute("-1*abs($f60m61)");
$f62min = Compute("-1*abs($f62m61)");
$f60maxtemp =Compute("abs($f60m61)");
$f62max =Compute("abs($f62m61)");

$f60min = min($f60mintemp, $f62min);
$f60max = min($f60maxtemp, $f62max);

$IntervalleY60 = Compute("$f60max - $f60min"); 

$y62 = Compute("$f60max +0.1*$IntervalleY60");
$y61 = Compute("$f60min -0.1*$IntervalleY60");


#Calcul du quadrillage et du x
$gridX60 = $x62 - $x61;
$gridY60 = $y62 - $y61;
$AffichageX60 =Compute("$x62 -0.5");

#Graphique
$f60graphique = "$f60 for x in <$x61,$x62> using color:red and weight:2";
#$graphique60 = init_graph($x61,$y61,$x62,$y62,'axes'=>[0,0],'grid'=>[$gridX60,$gridY60]);
$graphique60 = init_graph($x61,$y61,$x62,$y62,'axes'=>[0,0]);
$graphique60 -> lb('reset');
$graphique60 -> lb(new Label ( $a61,0,$a61,'black','left','top'));
$graphique60 -> lb(new Label ( $a62,0,$a62,'black','left','top'));
$graphique60 -> lb(new Label ( $m61,0,$m61,'black','left','top'));
if ($m61 <0)
{$graphique60 -> lb(new Label ( 0,$f60m61,$f60m61,'black','left','top'));}
else
{$graphique60 -> lb(new Label ( 0,$f60m61,$f60m61,'black','right','top'));}
$graphique60 -> lb(new Label ( $AffichageX60,0,'x','black','left','top'));
$graphique60 -> lb(new Label ( 0,$y62,'f(x)','black','right','top'));
$graphique60->moveTo($m61,$f60m61);
$graphique60->lineTo(0,$f60m61,'red',1,'dashed');
$graphique60->moveTo($m61,$f60m61);
$graphique60->lineTo($m61,0,'red',1,'dashed');
$pt601 = closed_circle( $m61,$f60m61, red);
$graphique60->stamps($pt601);
add_functions($graphique60, $f60graphique);
$imageG60 = image(insertGraph($graphique60),width =>300,height=>260,tex_size=>360);

#Graphique
$f61graphique = "$f61 for x in <$x61,$x62> using color:red and weight:2";
#$graphique61 = init_graph($x61,$y61,$x62,$y62,'axes'=>[0,0],'grid'=>[$gridX60,$gridY60]);
$graphique61 = init_graph($x61,$y61,$x62,$y62,'axes'=>[0,0]);
$graphique61 -> lb('reset');
$graphique61 -> lb(new Label ( $a61,0,$a61,'black','left','top'));
$graphique61 -> lb(new Label ( $a62,0,$a62,'black','left','top'));
$graphique61 -> lb(new Label ( $m61,0,$m61,'black','left','top'));
if ($m61 <0)
{$graphique61 -> lb(new Label ( 0,$f61m61,$f61m61,'black','left','top'));}
else
{$graphique61 -> lb(new Label ( 0,$f61m61,$f61m61,'black','right','top'));}
$graphique61 -> lb(new Label ( $AffichageX60,0,'x','black','left','top'));
$graphique61 -> lb(new Label ( 0,$y62,'f(x)','black','right','top'));
$graphique61->moveTo($m61,$f61m61);
$graphique61->lineTo(0,$f61m61,'red',1,'dashed');
$graphique61->moveTo($m61,$f61m61);
$graphique61->lineTo($m61,0,'red',1,'dashed');
$pt611 = closed_circle( $m61,$f61m61, red);
$graphique61->stamps($pt611);
add_functions($graphique61, $f61graphique);
$imageG61 = image(insertGraph($graphique61),width =>300,height=>260,tex_size=>360);

$m62 = -1*$m61;
$a611= -1*$a61;
$a621= -1*$a62;
$AffichageX601 =Compute("$x621 -0.5");

#Graphique
$f62graphique = "$f62 for x in <$x611,$x621> using color:red and weight:2";
#$graphique62 = init_graph($x611,$y61,$x621,$y62,'axes'=>[0,0],'grid'=>[$gridX60,$gridY60]);
$graphique62 = init_graph($x611,$y61,$x621,$y62,'axes'=>[0,0]);
$graphique62 -> lb('reset');
$graphique62 -> lb(new Label ( $a611,0,$a611,'black','left','top'));
$graphique62 -> lb(new Label ( $a621,0,$a621,'black','left','top'));
$graphique62 -> lb(new Label ( $m62,0,$m62,'black','left','top'));
if ($m62 <0)
{$graphique62 -> lb(new Label ( 0,$f62m61,$f62m61,'black','left','top'));}
else
{$graphique62 -> lb(new Label ( 0,$f62m61,$f62m61,'black','right','top'));}
$graphique62 -> lb(new Label ( $AffichageX601,0,'x','black','left','top'));
$graphique62 -> lb(new Label ( 0,$y62,'f(x)','black','right','top'));
$graphique62->moveTo($m62,$f62m61);
$graphique62->lineTo(0,$f62m61,'red',1,'dashed');
$graphique62->moveTo($m62,$f62m61);
$graphique62->lineTo($m62,0,'red',1,'dashed');
$pt621 = closed_circle( $m62,$f62m61, red);
$graphique62->stamps($pt621);
add_functions($graphique62, $f62graphique);
$imageG62 = image(insertGraph($graphique62),width =>300,height=>260,tex_size=>360);

#Graphique
$f63graphique = "$f63 for x in <$x611,$x621> using color:red and weight:2";
#$graphique63 = init_graph($x611,$y61,$x621,$y62,'axes'=>[0,0],'grid'=>[$gridX60,$gridY60]);
$graphique63 = init_graph($x611,$y61,$x621,$y62,'axes'=>[0,0]);
$graphique63 -> lb('reset');
$graphique63 -> lb(new Label ( $a611,0,$a611,'black','left','top'));
$graphique63 -> lb(new Label ( $a621,0,$a621,'black','left','top'));
$graphique63 -> lb(new Label ( $m62,0,$m62,'black','left','top'));
if ($m62 <0)
{$graphique63 -> lb(new Label ( 0,$f63m61,$f63m61,'black','left','top'));}
else
{$graphique63 -> lb(new Label ( 0,$f63m61,$f63m61,'black','right','top'));}
$graphique63 -> lb(new Label ( $AffichageX601,0,'x','black','left','top'));
$graphique63 -> lb(new Label ( 0,$y62,'f(x)','black','right','top'));
$graphique63->moveTo($m62,$f63m61);
$graphique63->lineTo(0,$f63m61,'red',1,'dashed');
$graphique63->moveTo($m62,$f63m61);
$graphique63->lineTo($m62,0,'red',1,'dashed');
$pt631 = closed_circle( $m62,$f63m61, red);
$graphique63->stamps($pt631);
add_functions($graphique63, $f63graphique);
$imageG63 = image(insertGraph($graphique63),width =>300,height=>260,tex_size=>360);

#Vecteur des graphiques
@ImageGraphique60 = ($imageG60,$imageG61,$imageG62,$imageG63); 
@Choix = shuffle(4);

if ($Choix[0] == 0)
{$RepPopUp60 = PopUp(["Choisir", "A", "B", "C", "D"], "A");}
elsif ($Choix[1] == 0)
{$RepPopUp60 = PopUp(["Choisir", "A", "B", "C", "D"], "B");}
elsif ($Choix[2] == 0)
{$RepPopUp60 = PopUp(["Choisir", "A", "B", "C", "D"], "C");}
else
{$RepPopUp60 = PopUp(["Choisir", "A", "B", "C", "D"], "D");}


Context()->texStrings;
BEGIN_TEXT
Choisir le graphique qui correspond à la fonction \( \displaystyle {f(x) = $b600 x^2+$b601 x + $b602}\).
$BR
\{$RepPopUp60->menu()\}
$BR
$BR


\{BeginTable(border=>1,tex_border=>"1pt", spacing=>2, padding=>2).
  AlignedRow(["Graphique A","Graphique B"], align => CENTER, separation=>0).
  AlignedRow(["$ImageGraphique60[$Choix[0]]","$ImageGraphique60[$Choix[1]]"], align => CENTER, separation=>0).
  AlignedRow(["Graphique C","Graphique D"], align => CENTER, separation=>0).
  AlignedRow(["$ImageGraphique60[$Choix[2]]","$ImageGraphique60[$Choix[3]]"], align => CENTER, separation=>0).

EndTable()
\}
$BR 
Cliquer sur un des graphiques pour faire un agrandissement.
END_TEXT
Context()->normalStrings;

ANS($RepPopUp60->cmp() );



ENDDOCUMENT();