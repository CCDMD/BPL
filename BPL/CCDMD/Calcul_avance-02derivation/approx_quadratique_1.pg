## DBsubject(Calcul différentiel et intégral à plusieurs variables)
## DBchapter(Applications de la limite et de la dérivée)
## KEYWORDS('applications', 'approximation par le polynôme de Taylor')
## Conçu par Éric Gaul, Collège Montmorency
## Author('Éric Gaul')
## Institution('Collège Montmorency')
## Date : avril 2017
## Language(fr)

# Modif. avril 2018 (par É. Gaul) : Augmenté la tolérance pour la
# reconnaissance plus facile du polynôme Q(x, y) par la AnswerChecker
 

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   "PGauxiliaryFunctions.pl",
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#

Context("Numeric");
Context()->variables->add(y => 'Real');
Context()->flags->set(
      tolerance    => .001,       # the relative or absolute tolerance
      tolType      => 'relative',  # or 'absolute'
    );
    
$a = random(2,5);
$b = random(2,5);
while($a == $b) {
    $b = random(2,5);
}

$x0 = random(1,4);
while($x0 == $a || $x0 == $b) {
    $x0 = random(2,5);
}
$y0 = random(1,4);
while($y0 == $a || $y0 == $b || $y0 == $x0) {
    $y0 = random(2,5);
}

$delx = random(1, 2, 1);
$dely = random(1, 2, 1);
$x1 = $x0 + $delx;
$y1 = $y0 + $dely;



$f = Formula("ln( $a * x^4 + $b * y^4)");
$fx = $f -> D("x") -> reduce;
$fy = $f -> D("y") -> reduce;
$fxx = $fx -> D("x") -> reduce;
$fyy = $fy -> D("y") -> reduce;
$fxy = $fx -> D("y") -> reduce;

$z0 = $f -> eval(x=>$x0,y=>$y0);
$fx0 = $fx -> eval(x=>$x0,y=>$y0);
$fy0 = $fy -> eval(x=>$x0,y=>$y0);
$fxx0 = $fxx -> eval(x=>$x0,y=>$y0);
$fyy0 = $fyy -> eval(x=>$x0,y=>$y0);
$fxy0 = $fxy -> eval(x=>$x0,y=>$y0);

$L = Formula("$z0 + $fx0*(x - $x0) + $fy0*(y - $y0)");
$Quad = Formula("$fxx0*(x-$x0)^2/2 + $fxy0*(x-$x0)*(y-$y0) + $fyy0*(y-$y0)^2/2") + $L;

$L1 = $L -> eval(x=>$x1,y=>$y1);
$Q1 = $Quad -> eval(x=>$x1,y=>$y1);
$f1 = $f -> eval(x=>$x1,y=>$y1);


##############################################################
#
#  Text
#
#


# Pour débogage :
#[`[$fx]`]  
#[`[$fy]`]  
#[`[$fxx]`]  
#[`[$fxy]`]  
#[`[$fyy]`]  
#[`[$L]`]  
#[`[$Q]`]  

$varstring = join(',',Context()->variables->names);

BEGIN_PGML
Soit la fonction [`f(x, y) = [$f]`].

(a) Trouver la fonction [`L(x, y)`] représentant l'approximation linéaire de [`f(x, y)`]
au point [`([$x0], [$y0])`] :

    [`L(x, y) = `] [_________________________________________________]{$L}

(b) Trouver la fonction [`Q(x, y)`] représentant l'approximation quadratique de [`f(x, y)`]
au point [`([$x0], [$y0])`] :

    [`Q(x, y) = `] [__________________________________________________________________________________________________]{"$Quad"}
    
(c) Utiliser [`L(x, y)`] pour approximer [`f(x, y)`] au point [`([$x1], [$y1])`] :

    [`f([$x1], [$y1]) \approx `] [_______________]{num_cmp($L1, reltol=>0.001) } (en utilisant maximum de chiffres significatifs)

(d) Utiliser [`Q(x, y)`] pour approximer [`f(x, y)`] au point [`([$x1], [$y1])`] :

    [`f([$x1], [$y1]) \approx `] [_______________]{num_cmp($Q1, reltol=>0.001) } (en utilisant maximum de chiffres significatifs)

(e) Calculer précisément [`f([$x1], [$y1])`] :

    [`f([$x1], [$y1]) = `] [_______________]{num_cmp($f1, reltol=>0.001) } (en utilisant maximum de chiffres significatifs)
    
Constater laquelle des deux approximations, linéaire ou quadratique, est la plus précise.
END_PGML


ENDDOCUMENT();
