##DESCRIPTION
## Voir le commentaire
## 
##ENDDESCRIPTION

## DBsubject(Calcul différentiel et intégral d'une variable)
## DBchapter(Limite et continuité)
## KEYWORDS('continuité en un point', 'discontinuité', 'discontinuité non essentielle', 'fonction définie par parties', 'graphique')
## Author('Jean-Philippe Villeneuve')
## Institution('Cégep de Rimouski')
## Level(2)
## Language(fr)

DOCUMENT();
loadMacros(
  "PGstandard.pl",
"MathObjects.pl", "PGgraphmacros.pl",
"PGcourse.pl", "unionLists.pl","unionTables.pl","contextPiecewiseFunction.pl","parserPopUp.pl","PGchoicemacros.pl"
);

COMMENT("Niveau de difficulté: Moyen. Fonction définie par morceaux (linéaire et linéaire) avec une discontinuité non essentielle ou non");

TEXT(beginproblem());
$refreshCachedImages = 1;

Context("PiecewiseFunction");
Context()->strings->add(nep=>{}, dne => {alias => "nep"} );


#Cas 3: Fonction par morceaux (linéaire et linéaire)

#Choix du a et de l'axe des x
$temp30 = random(-1,1,2);
if ($temp30 == -1) {
#Prendre un a négatif ou nul
$a31=random(-5, 0);
$x31=Compute("$a31 - 2");
$x32=2;}
else {
#Prendre un a positif ou nul
$a31=random(1, 5);
$x31=-1; 
$x32=Compute("$a31 + 2");}

$a32 = list_random(Compute("$a31 - 1"),Compute("$a31 + 1") );

#Définition de la fonction par morceaux

#Point de continuité possible entre les deux morceaux (si saut est non nul, la fonction fait un saut)
$k31 = random(2,8);
$signe31 = random(-1,1,2);

#Premier morceau
#Cas linéaire
$signe32 = random(-1,1,2);
$m32 = Compute("1");
$f31 = Formula("($signe31*$k31) + ($signe32*$m32*(x-$a31))")->reduce;
$f31a = $f31->eval(x=>$a31);
$f31x1 =$f31->eval(x=>"$a31 - 2"); 
if ($signe32 > 0) 
{#La fonction est croissante
$f31max = Compute("$f31a");
$f31min = Compute("$f31x1");}
else
{#La fonction est décroissante
$f31max = Compute("$f31x1");
$f31min = Compute("$f31a");}

#Deuxième morceau
#Cas linéaire
$m34 = Compute("1");
$f32 = Formula("($signe31*$k31) - ($signe32*$m34*(x-$a31))")->reduce;
$f32a = $f32->eval(x=>$a31);
$f32x2 =$f32->eval(x=>"$a31 + 2"); 
if ($signe32 > 0) 
{#La fonction est décroissante
$f32max = Compute("$f32a");
$f32min = Compute("$f32x2");}
else
{#La fonction est croissante
$f32max = Compute("$f32x2");
$f32min = Compute("$f32a");}

#Déterminer le maximum et le minimum de la fonction f3
if ($f31max > $f32max){$f30max = $f31max;} 
else
{$f30max = $f32max;}
if ($f31min < $f32min){$f30min = $f31min;} 
else
{$f30min = $f32min;}

#Déterminer l'intervalle en y
if ($f30min >= 0) 
{$y32 = Compute("$f30max + 2");
$y31 = -1;}
elsif ($f30max > 0)
{$y32 = Compute("$f30max + 2");
$y31 = Compute("$f30min -1");}
else
{$y32 = 2;
$y31 =  Compute("$f30min -1");}

#Calcul du quadrillage et du x
$gridX30 = $x32 - $x31;
$gridY30 = $y32 - $y31;
$AffichageX30 =Compute("$x32 -0.5");

#Graphique
$f31graphique = "$f31 for x in <$x31,$a31> using color:red and weight:2";
$f32graphique = "$f32 for x in <$a31,$x32> using color:red and weight:2";
$graphique30 = init_graph($x31,$y31,$x32,$y32,'axes'=>[0,0],'grid'=>[$gridX30,$gridY30]);
$graphique30 -> lb('reset');
$graphique30 -> lb(new Label ( 1,0,'1','black','left','top'));
$graphique30 -> lb(new Label ( 0,1,'1','black','right','top'));
$graphique30 -> lb(new Label ( $AffichageX30,0,'x','black','left','top'));
$graphique30 -> lb(new Label ( 0,$y32,'f(x)','black','right','top'));
add_functions($graphique30, $f31graphique,$f32graphique);
#Choisir la valeur de la fonction

# valeur f(a31)
$temp30 = random(0,2);
if ($temp30 == 0) 
{#La fonction est définie en x = a31
$f31a =$f31 ->eval(x=>$a31);
$RepFA31 = Compute("$f31a");
$RepPopUp31 = PopUp(["Choisir", "Oui", "Non"], "Oui");
$pt31 = closed_circle( $a31,$f31->eval(x=>$a31), red);
$graphique30->stamps($pt31);}
elsif($temp30 == 1) 
{#La fonction n'est pas définie en x = a31
#Réponse pour a31
$RepFA31 = Compute("nep");
$RepPopUp31 = PopUp(["Choisir", "Oui", "Non"], "Non");
$pt31 = open_circle( $a31,$f31->eval(x=>$a31), red);
$graphique30->stamps($pt31);}
else
{#La fonction fait un saut ponctuel en x = a31
#Réponse pour a31
$f31a =$f31 ->eval(x=>$a31);
$pt31 = open_circle( $a31,$f31a, red);
#Trouver une valeur entre y31 +1 et y32 -1 qui n'est pas f(a).
if ($f31a <= Compute("$y31 + 1")) {$pt32y = list_random($y31 + 2,$y32 - 1);}
elsif ($f31a >= Compute("$y32 - 1")) 
{$pt32y = list_random($y31 + 2,$y32 - 2);}
else {
$temp31 = random(0,1);
if ($temp31 == 0) {$pt32y = list_random($y31 + 1,$f31a - 1);}
else{$pt32y = list_random($f31a + 1, $y32 - 1);}}
$RepFA31 = Compute("$pt32y");
$RepPopUp31 = PopUp(["Choisir", "Oui", "Non"], "Non");
$pt32 = closed_circle( $a31,$pt32y, red);
$graphique30->stamps($pt31,$pt32);}
#Graphique
$imageG30 = image(insertGraph($graphique30),width =>250,height=>250,tex_size=>350);


#Réponses restantes en a31
$RepLimiteG31 = $f31->eval(x=>$a31);
$RepLimiteD31 = $f31->eval(x=>$a31);

#Réponse en a32
#Fonction f30
$f30 = PiecewiseFunction("$f31 if  x < $a31 else $f32 if x > $a31 ");
$RepFA32 = $f30->eval(x=>$a32);
$RepLimiteG32 = $f30->eval(x=>$a32);
$RepLimiteD32 = $f30->eval(x=>$a32);
$RepPopUp32 = PopUp(["Choisir", "Oui", "Non"], "Oui");

#Choix des valeurs a31 et a32 à afficher dans l'ordre ou non
@Valeur = ($a31,$a32); 
#Réponse
@Rep = ($RepFA31,$RepLimiteG31,$RepLimiteD31,$RepPopUp31,
$RepFA32,$RepLimiteG32,$RepLimiteD32,$RepPopUp32);
@Choix = shuffle(2);

Context()->texStrings;
BEGIN_TEXT
Soit la fonction dont le graphique est le suivant. 
$PAR
$BCENTER
$imageG30
$BR
Cliquer sur le graphique pour faire un agrandissement.
$ECENTER

$BR
\{
ColumnTable(
"1) Déterminer les valeurs ci-dessous et répondre à la question:".
$BR.
BeginList("OL", type=>"a").
$ITEM. " \( \displaystyle f($Valeur[$Choix[0]])  \)  = ". ans_rule(20). 
$ITEMSEP.
$ITEM." \( \displaystyle{  \lim_{x \rightarrow $Valeur[$Choix[0]]^{-}} f(x) = }\)". ans_rule(20). 
$ITEMSEP.
$ITEM." \( \displaystyle{\lim_{x \rightarrow $Valeur[$Choix[0]]^{+}} f(x) = }\)". ans_rule(20).
$ITEMSEP.
$ITEM. "Est-ce que la fonction est continue en \(x = $Valeur[$Choix[0]]\)? ".
$Rep[4*$Choix[0]+3]->menu().
EndList("OL"),
"2) Déterminer les valeurs ci-dessous et répondre à la question:".
$BR.
BeginList("OL", type=>"a").
$ITEM. " \( \displaystyle f($Valeur[$Choix[1]])  \)  = ". ans_rule(20). 
$ITEMSEP.
$ITEM." \( \displaystyle{  \lim_{x \rightarrow $Valeur[$Choix[1]]^{-}} f(x) = }\)". ans_rule(20). 
$ITEMSEP.
$ITEM." \( \displaystyle{\lim_{x \rightarrow $Valeur[$Choix[1]]^{+}} f(x) = }\)". ans_rule(20).
$ITEMSEP.
$ITEM. "Est-ce que la fonction est continue en \(x = $Valeur[$Choix[1]]\)? ".
$Rep[4*$Choix[1]+3]->menu().
EndList("OL"),
indent=>"0", separation=>"50", valign=>"TOP"
);
\}
$BR
 \( \bf Note:\) Écrire \( \bf nep \), si la fonction n'est pas définie en une valeur.

END_TEXT
Context()->normalStrings;

ANS($Rep[4*$Choix[0]]->cmp() );
ANS(num_cmp($Rep[4*$Choix[0]+1]));
ANS(num_cmp($Rep[4*$Choix[0]+2]));
ANS( $Rep[4*$Choix[0]+3]->cmp() );

ANS($Rep[4*$Choix[1]]->cmp() );
ANS(num_cmp($Rep[4*$Choix[1]+1]));
ANS(num_cmp($Rep[4*$Choix[1]+2]));
ANS( $Rep[4*$Choix[1]+3]->cmp() );


ENDDOCUMENT();