## DBsubject(Équations différentielles)
## DBchapter(Équations différentielles ordinaires)
## KEYWORDS('champ de directions')
## Modifié par Éric Gaul, Collège Montmorency
## Date : février 2017
## Traduction française : Éric Gaul
## Language(fr)

###############Source#################
## DESCRIPTION
## Calculus
## ENDDESCRIPTION
##
## Tagged by tda2d
##
## ZDBsubject(Differential equations)
## ZDBchapter(First order differential equations)
## ZDBsection(Direction fields)
## Institution(Rochester)
## MLT(d_field_02)
## MLTleader(1)
## Level(2)
## TitleText1('Calculus: Early Transcendentals')
## AuthorText1('Rogawski')
## EditionText1('1')
## Section1('9.3')
## Problem1('9')
###############Source#################



DOCUMENT();        # This should be the first executable line in the problem.

loadMacros("PG.pl",
           "PGbasicmacros.pl",
           "PGchoicemacros.pl",
           "PGanswermacros.pl",
           "PGgraphmacros.pl",
           "PGnumericalmacros.pl"
           );

TEXT(beginproblem()); # standard preamble to each problem.

# Since this is a true questions, we do not usually wish to tell students which
# parts of the matching question have been answered correctly and which are
# incorrect.  That is too easy.  To accomplish this we set the following flag to zero.
$showPartialCorrectAnswers = 0;


# Make a new select list

$tf = new_match_list();
# $tf now "contains" the select list object.  


# use pop-up list instead of an answer rule.


# What should the pop-up list say, and what should it submit for an answer when selected?
# These are specified in the statment below.
# To enter T as an answer choose the list element "True"
# To enter F as an answer choose the list element "False"
# The first choice is a blank to make the students do SOMETHING!!!
$tf -> ra_pop_up_list( [ No_answer => "?", T => "True", F => "False"] ); 
# Note how the list is constructed [ answer => list element , answer => list element ]

# Insert some  questions and whether or not they are true.
$numberOfQuestions = 4;
$tf -> qa (
"\(y'= 2y + x^2e^{2x} \)",
sub{my ($x,$y) = @_; 2*$y+($x**2)*exp(2*$x); },
"\( y'= -2 + x - y \)",
sub{my ($x,$y) = @_; -2 + $x - $y;},
"\(y'= e^{-x} + 2y\)",
sub{my ($x,$y) = @_; exp(-$x) + 2*$y;},
"\(y'= 2\sin(x) + 1 + y\)",
sub{my ($x,$y) = @_; 2*sin($x) + 1 + $y;},
"\(\displaystyle y'= -\frac{(2x+y)}{(2y)} \)",
sub{my ($x,$y) = @_; ($y==0)? -2*$x/0.001 : -(2*$x+$y)/(2*$y);},
"\(y'= y + 2\)",
sub{my ($x,$y) = @_; $y + 2 ;},
);   # remember every statement has to end with a semi-colon.
$tf ->choose($numberOfQuestions);

BEGIN_TEXT

Associer chacune des équations différentielles suivantes avec son
champ de directions.
$BR$BR
Voici quelques indications pour procéder :
	\{OL(
	"Remplacer \(y\) par \(0\) (si possible) et observer comment se comporte la dérivée le long de l'axe des \(x\).",
	"Faire de même pour l'axe des \(y\) en remplaçant \(x\) par \(0\) (si possible).",
	"Considérer l'équation obtenue en posant \(y' = 0\) (elle correspond à une courbe du plan où les pentes (directions) sont toutes horizontales).",
	"Poser \(y'\) égal à une constante (non nulle) donne une courbe où toutes les pentes sont les mêmes. Ces courbes sont dites $BITALIC isoclines${EITALIC}."
	 )\}
$BR	 
	\{ $tf->print_q \}
$BR
$BBOLD Note : $EBOLD Cliquer sur les images pour les agrandir.

END_TEXT
$dx_rule = sub{my ($x,$y) = @_; 1; };
$dy_rule = sub{my ($x,$y) = @_; $y; };
# prepare graphs:
@dy_rules = @{ $tf->{selected_a} };

for my $i (0..$numberOfQuestions-1) {
	$graph[$i] = init_graph(-4,-4,4,4,'axes'=>[0,0],'grid'=>[8,8]);
$graph[$i]->new_color("dodgerblue",30, 100, 255); 
	$vectorfield[$i] = new VectorField($dx_rule, $dy_rules[$i], $graph[$i]);
#	$vectorfield[$i]->dot_radius(0);
$vectorfield[$i]->dot_radius(1);
$vectorfield[$i]->arrow_color("dodgerblue");
$vectorfield[$i]->dot_color("dodgerblue");
	$graphURL[$i] = insertGraph($graph[$i]);
}

BEGIN_TEXT
	$PAR
	\{  imageRow( [@graphURL[0..$numberOfQuestions/2-1]], 
		      [@ALPHABET[0..$numberOfQuestions/2-1]], 
		      height => 200, width => 200,tex_size=>450 )  \}
	\{  imageRow( [@graphURL[$numberOfQuestions/2..$numberOfQuestions-1]], 
		      [@ALPHABET[$numberOfQuestions/2..$numberOfQuestions-1]], 
		      height => 200, width => 200,tex_size=>450 ) \}
	
END_TEXT

#
#  All or nothing grader
#  
install_problem_grader(~~&std_problem_grader);

ANS(str_cmp( $tf->ra_correct_ans )   ) ;



#########################################################  



ENDDOCUMENT();        # This should be the last executable line in the problem.

