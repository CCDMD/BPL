##DESCRIPTION
##  Lines & Planes
##ENDDESCRIPTION

## DBsubject('Linear Algebra')
## DBchapter('Euclidean Vectors and Euclidean Space')
## KEYWORDS('applications')

## Author('MC Bonneau')
## Institution('Cegep Heritage College')

DOCUMENT();

loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"parserVectorUtils.pl",
"contextLimitedVector.pl",
"contextLimitedPoint.pl",
"parserParametricLine.pl",
"parserImplicitEquation.pl",
"PGcourse.pl",
"PGunion.pl",
"parserSolutionFor.pl",
"parserPopUp.pl",
"scaffold.pl",
);
 
TEXT(beginproblem());
$showPartialCorrectAnswers = 1;

Context("LimitedVector-coordinate");
Context()->{cmpDefaults}{Vector} = {promotePoints => 1};
Context()->lists->set(Vector=>{open=>'(', close=>')'});
$V1 = Vector(random(1,7,1), random(1,7,1), random(1,7,1));

$V2 = Vector(random(1,7,1), random(1,7,1), random(1,7,1));
$N = $V1 x $V2;
while((areParallel $V1 $V2) || ($N->extract(3)==0))
{
    $V2 = Vector(random(1,7,1), random(1,7,1), random(1,7,1));
    $N = $V1 x $V2; 
}

Context("LimitedPoint");
do
{
    $P = Point(non_zero_random(-5,5,1), random(-5,5,1), random(-5,5,1));
    $Q = Point(non_zero_random(-5,5,1), random(-5,5,1), random(-5,5,1));
} until($P!=$Q);

$rValue = random(4,5,1);
$tValue = random(2,3,1);
$PV1 = Point($P - $rValue*$V1);
$PV2 = Point($Q + $tValue*$V2);

Context("ParametricLine");
Context()->lists->set(Vector=>{open=>'(', close=>')'});
Context()->parens->set("(" => {type => "Vector", close => ")"});
Context()->variables->add(r => 'Real');
$r = Formula('r');
$Line1 = ParametricLine(Point($PV1) + $r*$V1);
$Line2 = ParametricLine(Point($PV2),$V2);

Context()->texStrings;
BEGIN_TEXT
$BBOLD Question $EBOLD $BR $BR

Let $BR
\( \quad \ell_1: (x,y,z) = $Line1 \) where \(r\in\mathbb{R}\)$BR
and $BR
\( \quad \ell_2: (x,y,z) = $Line2 \) where \(t\in\mathbb{R}\).$BR $BR
${BBOLD}(a)$EBOLD
Show that the lines \( \ell_1 \) and \( \ell_2 \) are skew. $BR $BR
${BBOLD}(b)$EBOLD
Find the distance between the lines \( \ell_1 \) and \( \ell_2 \). 
$BR
$BR
$HR
$BBOLD Solution $EBOLD $BR 
$HR $BR
END_TEXT
Context()->normalStrings;

###########################################
#  The scaffold
Scaffold::Begin();

###########################################
###########################################

Context()->texStrings;
BEGIN_TEXT
$BBOLD Part A $EBOLD $BR $BR

END_TEXT
Context()->normalStrings;

###########################################

Section::Begin("Identify the required vectors");

Context("LimitedVector-coordinate");
Context()->{cmpDefaults}{Vector} = {promotePoints => 1};
Context()->lists->set(Vector=>{open=>'(', close=>')'});
$P2P1 = $PV1 - $PV2;

Context()->texStrings;
BEGIN_TEXT

Let \( P_1 \) be the support point of the line \( \ell_1 \). $BR 
Let \( \vec{v_1} \) be the generator vector of the line \( \ell_1 \). $BR $BR
Let \( P_2 \) be the support point of the line \( \ell_2 \). $BR
Let \( \vec{v_2} \) be the generator vector of the line \( \ell_2 \). $BR $BR

We know $BR $BR
\( \quad P_1 = \) \{ ans_rule(15) \} (let \(r=0\) and write the components of the point) $BR $BR
\( \quad \vec{v_1} = \) \{ ans_rule(15) \} $BR $BR
\( \quad P_2 = \) \{ ans_rule(15) \} (let \(t=0\) and write the components of the point) $BR $BR
\( \quad \vec{v_2} = \) \{ ans_rule(15) \} $BR $BR
and $BR 
\( \quad \overrightarrow{P_2 P_1} = \) \{ ans_rule(15) \} (write the components of the vector \( \overrightarrow{P_2 P_1} \))$BR $BR


END_TEXT
Context()->normalStrings;

ANS($PV1->cmp);
ANS($V1->cmp);
ANS($PV2->cmp);
ANS($V2->cmp);

ANS($P2P1->cmp);

Section::End();

Section::Begin("Check if the lines are parallel");

Context("Numeric");
$popExist = PopUp(["Choose", "can", "cannot"],"cannot");

Context()->texStrings;
BEGIN_TEXT

We \{ $popExist->menu() \} find a scalar \( k \) such that 
\( \vec{v_1} = k \vec{v_2} \).$BR $BR

END_TEXT
Context()->normalStrings;

ANS($popExist->cmp);

Section::End();

Section::Begin(" ");

Context("Numeric");
$popParallel = PopUp(["Choose", "parallel", "not parallel"],"not parallel");

Context()->texStrings;
BEGIN_TEXT

Which gives us that $BR $BR
\( \quad \vec{v_1} \) and \( \vec{v_2} \) are \{ $popParallel->menu() \} $BR $BR
and $BR $BR
\( \quad \ell_1 \) and \( \ell_2 \) are \{ $popParallel->menu() \}

END_TEXT
Context()->normalStrings;

ANS($popParallel->cmp);
ANS($popParallel->cmp);

Section::End();

Section::Begin("Check if the lines are intersecting");

Context("Numeric");
$popCoplanar = PopUp(["Choose", "coplanar", "equal", "equivalent", "parallel"],"coplanar");
$popTripleScalar = PopUp(["Choose", "cross product", "dot product", "triple scalar product"],"triple scalar product");
    
Context()->texStrings;
BEGIN_TEXT
\( \ell_1 \) and \( \ell_2 \) are intersecting if the vectors \( \overrightarrow{P_2 P_1} \), \( \vec{v_1} \) and \( \vec{v_2} \) are \{ $popCoplanar->menu() \}, that is, when their \{ $popTripleScalar->menu() \} \( = 0\). $BR $BR

END_TEXT
Context()->normalStrings;

ANS($popCoplanar->cmp);
ANS($popTripleScalar->cmp);

Section::End();

Section::Begin(" ");

Context("Numeric");
$popConclusion = PopUp(["Choose", "parallel disjoint", "identical", "skew", "intersecting"],"skew");

Context("Vector");
Context()->{cmpDefaults}{Vector} = {promotePoints => 1};
Context()->lists->set(Vector=>{open=>'(', close=>')'});
$Triple = $P2P1.$N;

Context()->texStrings;
BEGIN_TEXT
We have
\{ 
BeginTable(border=>0, tex_border=>"1pt", spacing=>0, padding=>2, center=>0).
AlignedRow(["\( \overrightarrow{P_2 P_1} \bullet \big( \vec{v_1} \times \vec{v_2} \big) \) ","\( = \)","\( $P2P1 \bullet \)".ans_rule(15),"(find the cross product)"], align=>LEFT, separation=>0).

AlignedRow([" ","\( = \)",ans_rule(15),"(find the dot product)"], align=>LEFT, separation=>0).

EndTable()
\}
$BR $BR
Thus the line \( \ell_1 \) and the line \( \ell_2 \) are \{ $popConclusion->menu() \}.

END_TEXT
Context()->normalStrings;

ANS($N->cmp);
ANS($Triple->cmp);
ANS($popConclusion->cmp);

Section::End();

###########################################
###########################################

Context()->texStrings;
BEGIN_TEXT
$BR
$BBOLD Part B $EBOLD $BR $BR

END_TEXT
Context()->normalStrings;

###########################################

Section::Begin("Find the distance");

Context("Point");
$PointValue = ($N->extract(1)*$Q->extract(1) + $N->extract(2)*$Q->extract(2) + $N->extract(3)*$Q->extract(3))/$N->extract(3);
$A = Point(0,0,$PointValue);

Context("LimitedVector-coordinate");
Context()->{cmpDefaults}{Vector} = {promotePoints => 1};
Context()->lists->set(Vector=>{open=>'(', close=>')'});
$AP = Vector($P - $A);

Context()->texStrings;
BEGIN_TEXT
\{ image( "distance_line_skew.png",width=>329, height=>201 ) \} $BR $BR

Which of the formulas below corresponds to the $BBOLD distance? $EBOLD $BR $BR
\{ 
BeginTable(border=>0, tex_border=>"1pt", spacing=>0, padding=>2, center=>0).
AlignedRow(["Option 1:","\( \displaystyle \| \textrm{proj}_{\vec{v_1} \times \vec{v_2}}\overrightarrow{P_2 P_1} \| = \left\lVert \left( \frac{\big(\vec{v_1} \times \vec{v_2} \big) \bullet \overrightarrow{P_2 P_1}}{\overrightarrow{P_2 P_1} \bullet \overrightarrow{P_2 P_1}} \right) \overrightarrow{P_2 P_1} \right\lVert = \frac{ | \big(\vec{v_1} \times \vec{v_2} \big) \bullet \overrightarrow{P_2 P_1} | }{ \| \overrightarrow{P_2 P_1} \| } \)"], align=>LEFT, separation=>0).

AlignedRow([""], align=>LEFT, separation=>0).

AlignedRow(["Option 2:","\( \displaystyle \| \textrm{proj}_{\vec{v_1} \times \vec{v_2}}\overrightarrow{P_2 P_1} \| = \left\lVert \left( \frac{\overrightarrow{P_2 P_1} \bullet \big( \vec{v_1} \times \vec{v_2} \big)}{\big( \vec{v_1} \times \vec{v_2} \big) \bullet \big( \vec{v_1} \times \vec{v_2} \big)} \right) \big( \vec{v_1} \times \vec{v_2} \big) \right\lVert  = \frac{ | \overrightarrow{P_2 P_1} \bullet \big( \vec{v_1} \times \vec{v_2} \big) | }{ \| \vec{v_1} \times \vec{v_2} \| } \)"], align=>LEFT, separation=>0).

EndTable()
\}
$BR $BR
The correct formula is $BBOLD Option $EBOLD \{ ans_rule(2) \} ($BITALIC enter the number corresponding to the chosen option $EITALIC) $BR

END_TEXT
Context()->normalStrings;

ANS(Compute("2")->cmp );

Section::End();

Section::Begin(" ");

Context("Vector");
Context()->{cmpDefaults}{Vector} = {promotePoints => 1};
Context()->lists->set(Vector=>{open=>'(', close=>')'});
$NormN = norm($N);

Context("Numeric");
$Distance = abs($Triple)/$NormN;

Context()->texStrings;
BEGIN_TEXT

We have
\{ 
BeginTable(border=>0, tex_border=>"1pt", spacing=>0, padding=>2, center=>0).
AlignedRow(["\( \text{d} \big( \ell_1,\ell_2 \big) \) ","\( = \)","\( \displaystyle \frac{| \overrightarrow{P_2 P_1} \bullet \big( \vec{v_1} \times \vec{v_2} \big) |}{ \| \vec{v_1} \times \vec{v_2} \|} \)"], align=>LEFT, separation=>0).

AlignedRow([" ","\( = \)",ans_rule(15).$BR.$HR.ans_rule(15),"(write the appropriate numerical values)"], align=>LEFT, separation=>0).

AlignedRow([" ","\( = \)",ans_rule(15),"(compute the distance)"], align=>LEFT, separation=>0).

EndTable()
\}
$BR $BR
which tells us that the closest points between the lines \( \ell_1 \) and \( \ell_2 \) are \{ ans_rule(15) \} units apart.

END_TEXT
Context()->normalStrings;

ANS(Compute("abs($Triple)")->cmp);
ANS($NormN->cmp);
ANS($Distance->cmp);
ANS($Distance->cmp);

Section::End();

###########################################
###########################################

Scaffold::End();

ENDDOCUMENT();
