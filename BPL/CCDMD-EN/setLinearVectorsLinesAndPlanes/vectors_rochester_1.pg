##DESCRIPTION
##  Lines & Planes
##ENDDESCRIPTION

## DBsubject('Linear Algebra')
## DBchapter('Euclidean Vectors and Euclidean Space')
## KEYWORDS('applications')

## Author('MC Bonneau')
## Institution('Cegep Heritage College')
           
DOCUMENT();	# This should be the first executable line in the problem.

loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"parserVectorUtils.pl",
"contextLimitedVector.pl",
"parserParametricLine.pl",
"parserImplicitPlane.pl",
"answerCustom.pl",
"PGcourse.pl",
"PGunion.pl",
"parserPopUp.pl",
"scaffold.pl",
);
 
TEXT(beginproblem());
$showPartialCorrectAnswers = 1;

Context("Point");
              
$P = Point(non_zero_random(-9, 9, 1), non_zero_random(-9, 9, 1), random(-9, 9, 1));

Context("LimitedVector-coordinate");
Context()->{cmpDefaults}{Vector} = {promotePoints => 1};
Context()->lists->set(Vector=>{open=>'(', close=>')'});
$N = Vector(random(-9, 9, 1),random(-9, 9, 1),non_zero_random(-9, 9, 1));

Context("ImplicitPlane");
$Plane = ImplicitPlane($N,1);

###########################################
Context()->texStrings;
BEGIN_TEXT
$BBOLD Question $EBOLD $BR $BR

Find the vectorial equation of the line through the point 
\( P = $P \) that is orthogonal to the plane
\( $Plane \).
$BR
$BR
$HR
$BBOLD Solution $EBOLD $BR 
END_TEXT
Context()->normalStrings;

###########################################
#  The scaffold
Scaffold::Begin();

###########################################
Section::Begin("Construct the generator vector");

Context("Numeric");
$popParallel = PopUp(["Choose", "orthogonal", "parallel"],"parallel");

Context()->texStrings;
BEGIN_TEXT
Let \( \vec{n} \) be the normal vector of the plane. $BR
Let \( \vec{v} \) be the generator vector of the line. $BR $BR

$BITALIC Draw a picture to see the relationship between the generator vector and the normal vector. $EITALIC $BR $BR

We know $BR $BR
\( \quad \vec{n} = \) \{ ans_rule(15) \} $BR $BR
\( \quad \vec{n} \) and \( \vec{v} \) are \{ $popParallel->menu() \}
$BR $BR
which gives us $BR 
\( \quad \vec{v} = \) \{ ans_rule(15) \} $BR

END_TEXT
Context()->normalStrings;

ANS($N->cmp);
ANS($popParallel->cmp);
ANS($N->cmp( checker=>sub {
  my ($correct, $student, $ansHash) = @_;
  return $correct->isParallel($student);
}, showCoordinateHints => 0 ) );

Section::End();

###########################################
Section::Begin("Choose a support point");

Context()->texStrings;
BEGIN_TEXT
Let \( P \) be the support point of the line. $BR $BR

We have $BR 

\{ 
BeginTable(border=>0, tex_border=>"1pt", spacing=>0, padding=>2, center=>0).
AlignedRow(["\( P \) ","\( = \)",ans_rule(15),"(write the components of the point)"], align=>LEFT, separation=>0).

EndTable()
\}


END_TEXT
Context()->normalStrings;

ANS($P->cmp);

Section::End();

###########################################
Section::Begin("Construct the vectorial equation");

Context("Vector");
Context()->{cmpDefaults}{Vector} = {promotePoints => 1};
Context()->lists->set(Vector=>{open=>'(', close=>')'});

#check box 3
$ans_eval3 = $N->cmp( checker=>sub {
  my ($correct, $student, $ansHash) = @_;
  return $correct->isParallel($student);
}, showCoordinateHints => 0 );
$ans_hash3 = $ans_eval3->evaluate($inputs_ref->{ANS_NUM_TO_NAME(3)});
$TESTbox3 = $ans_hash3->{score};

$V = $N;
if($TESTbox3)
{
    $V = Vector($inputs_ref->{ANS_NUM_TO_NAME(3)});
}

Context("Vector");
Context()->{cmpDefaults}{Vector} = {promotePoints => 1};
Context()->lists->set(Vector=>{open=>'(', close=>')'});
Context()->variables->are(t=>"Real");

#  for checking a particular vector parametric line
sub mycheck {
  my ($correct, $student, $ansHash) = @_;

  if ( 
       ($correct . i == $student . i) && 
       ($correct . j == $student . j) && 
       ($correct . k == $student . k) 
     ) 
  { return 1; } else { return 0; }
}

$T = Formula("t");
$line = $P + $T * $V;

Context()->texStrings;
BEGIN_TEXT
Thus vectorial equation of the line is $BR 

\{ 
BeginTable(border=>0, tex_border=>"1pt", spacing=>0, padding=>2, center=>0).
AlignedRow(["\( \ell: (x,y,z) \) ","\( = \)",ans_rule(40),"(write the vectorial equation as \( P + t \vec{v} \))"], align=>LEFT, separation=>0).

EndTable()
\}


END_TEXT
Context()->normalStrings;

ANS( custom_cmp( $line, ~~&mycheck, showCoordinateHints=>1 ) );

Section::End();

###########################################

Scaffold::End();

ENDDOCUMENT();	# This should be the last executable line in the problem.
