##DESCRIPTION
##  Lines & Planes
##ENDDESCRIPTION

## DBsubject('Linear Algebra')
## DBchapter('Euclidean Vectors and Euclidean Space')
## KEYWORDS('applications')

## Author('MC Bonneau')
## Institution('Cegep Heritage College')

DOCUMENT();

loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"parserVectorUtils.pl",
"contextLimitedVector.pl",
"parserParametricLine.pl",
"parserImplicitPlane.pl",
"answerCustom.pl",
"PGcourse.pl",
"PGunion.pl",
"parserPopUp.pl",
"scaffold.pl",
);
 
TEXT(beginproblem());
$showPartialCorrectAnswers = 1;

Context("LimitedVector-coordinate");
Context()->{cmpDefaults}{Vector} = {promotePoints => 1};
Context()->lists->set(Vector=>{open=>'(', close=>')'});
do
{
    $V = Vector(non_zero_random(-10,10,1),non_zero_random(-10,10,1),non_zero_random(-10,10,1)); 

    $N = Vector(non_zero_random(-10,10,1),non_zero_random(-10,10,1),non_zero_random(-10,10,1));
    $DotProduct = $V.$N;

} until ($DotProduct == 0);

Context("Point");
do
{
    $p1 = random(-9,9,1);
    $p2 = non_zero_random(-9,9,1);
    $p3 = random(-9,9,1);
    $P = Point($p1, $p2, $p3);

    $random1 = random(1,9,1);
    $random2 = random(1,9,1);
    $Q = Point($p1+$random1, $p2, $p3-$random2);

    #ensures that support point for plane is of the form (0,0,integer)
    $tempValue = ($N->extract(1)*$Q->extract(1) + $N->extract(2)*$Q->extract(2) + $N->extract(3)*$Q->extract(3));
    
    #check if P is on the plane
    $ValueForP = ($N->extract(1)*$P->extract(1) + $N->extract(2)*$P->extract(2) + $N->extract(3)*$P->extract(3));
    
} until( ($tempValue%($N->extract(3)) == 0) && ($ValueForP!=$tempValue));

Context("ImplicitPlane");
Context()->noreduce('(-x)-y');
Context()->noreduce('(-x)+y');
$Plane = ImplicitPlane($Q,$N);

Context("ParametricLine");
Context()->lists->set(Vector=>{open=>'(', close=>')'});
Context()->parens->set("(" => {type => "Vector", close => ")"});
$Line = ParametricLine(Point($P),$V);

Context()->texStrings;
BEGIN_TEXT
$BBOLD Question $EBOLD $BR $BR

Let $BR
\( \quad \ell: (x,y,z) = $Line \) where \(t\in\mathbb{R}\)$BR
and $BR
\( \quad \Phi: $Plane \). $BR $BR
${BBOLD}(a)$EBOLD
Show that the line \( \ell \) and the plane \( \Phi \) are parallel with the line disjoint to the plane. $BR $BR
${BBOLD}(b)$EBOLD
Find the distance between the line \( \ell \) and the plane \( \Phi \). 
$BR
$BR
$HR
$BBOLD Solution $EBOLD $BR 
$HR $BR
END_TEXT
Context()->normalStrings;

###########################################
#  The scaffold
Scaffold::Begin();

###########################################
###########################################

Context()->texStrings;
BEGIN_TEXT
$BBOLD Part A $EBOLD $BR $BR

END_TEXT
Context()->normalStrings;

###########################################
Section::Begin("Identify the required vectors");

Context()->texStrings;
BEGIN_TEXT

Let \( P \) be the support point of the line \( \ell \). $BR 
Let \( \vec{v} \) be the generator vector of the line \( \ell \). $BR $BR
Let \( \vec{n} \) be the normal vector of the plane \( \Phi \). $BR $BR

We know $BR $BR
\( \quad P = \) \{ ans_rule(15) \} (let \(t=0\) and write the components of the point) $BR $BR
\( \quad \vec{v} = \) \{ ans_rule(15) \} $BR $BR
\( \quad \vec{n} = \) \{ ans_rule(15) \} $BR $BR

END_TEXT
Context()->normalStrings;

ANS($P->cmp);
ANS($V->cmp);
ANS($N->cmp);

Section::End();

###########################################
Section::Begin("Check if the line and plane are parallel");

$popOrthogonal = PopUp(["Choose", "orthogonal", "not orthogonal"],"orthogonal");
$popParallel = PopUp(["Choose", "parallel", "not parallel"],"parallel");

Context()->texStrings;
BEGIN_TEXT

We have $BR $BR
\( \quad \vec{v} \bullet \vec{n} = \) \{ ans_rule(15) \} $BR $BR

which gives us that 
\( \vec{n} \) and \( \vec{v} \) are \{ $popOrthogonal->menu() \} $BR $BR
and \( \ell \) and \( \Phi \) are \{ $popParallel->menu() \}

END_TEXT
Context()->normalStrings;

ANS($DotProduct->cmp);
ANS($popOrthogonal->cmp);
ANS($popParallel->cmp);

Section::End();

Section::Begin("Check if the line is inside the plane");

Context("Numeric");
$Avalue = $N->extract(1)*$P->extract(1) + $N->extract(2)*$P->extract(2) + $N->extract(3)*$P->extract(3);

$popEqual = PopUp(["Choose", "equal", "not equal"],"not equal");
$popCommon = PopUp(["Choose", "lies", "does not lie"],"does not lie");
$popConclusion = PopUp(["Choose", "parallel with the line disjoint to the plane", "parallel with the line inside the plane", "intersecting"],"parallel with the line disjoint to the plane");

Context()->texStrings;
BEGIN_TEXT

We know the line \( \ell \) is inside the plane \( \Phi \) if \( P \in \Phi \).  $BR $BR

Subbing \( P \) into the LHS of the equation for \( \Phi: $Plane \) gives us \{ ans_rule(15) \}, which is \{ $popEqual->menu() \} to the RHS. $BR $BR

The point \( P \) \{ $popCommon->menu() \} on both the line \( \ell \) and the plane \( \Phi \). $BR $BR

Thus the line \( \ell \) and the plane \( \Phi \) are \{ $popConclusion->menu() \}.

END_TEXT
Context()->normalStrings;

ANS($Avalue->cmp);

ANS($popEqual->cmp);
ANS($popCommon->cmp);
ANS($popConclusion->cmp);

Section::End();

###########################################
###########################################

Context()->texStrings;
BEGIN_TEXT
$BR
$BBOLD Part B $EBOLD $BR $BR

END_TEXT
Context()->normalStrings;

###########################################

Section::Begin("Find the distance");

Context("Numeric");
$popPoint = PopUp(["Choose", "a point on a line AND a point on a plane", "a point on a line AND a plane", "a point on a plane AND a line"],"a point on a line AND a plane");

Context()->texStrings;
BEGIN_TEXT
We know \( \text{d} \big( \ell, \Phi \big) \), the distance between the line \( \ell \) and the plane \( \Phi \), can be computed by finding the distance between \{ $popPoint->menu() \}. $BR $BR

END_TEXT
Context()->normalStrings;

ANS($popPoint->cmp);

Section::End();

Section::Begin(" ");

Context("Point");
$PointValue = ($N->extract(1)*$Q->extract(1) + $N->extract(2)*$Q->extract(2) + $N->extract(3)*$Q->extract(3))/$N->extract(3);
$A = Point(0,0,$PointValue);

Context("LimitedVector-coordinate");
Context()->{cmpDefaults}{Vector} = {promotePoints => 1};
Context()->lists->set(Vector=>{open=>'(', close=>')'});
$AP = Vector($P - $A);

Context()->texStrings;
BEGIN_TEXT
\{ image( "distance_point_plane.png",width=>329, height=>201 ) \} $BR $BR

Let \( A \) be the support point of the plane \( \Phi \). $BR $BR
We have $BR
\( \quad A = \) \{ ans_rule(15) \} (let \(x = 0, y = 0 \) and solve for \( z \). Then write the components of the point.) $BR $BR
and $BR 
\( \quad \overrightarrow{AP} = \) \{ ans_rule(15) \} (write the components of the vector \( \overrightarrow{AP} \))$BR $BR

Which of the formulas below corresponds to the $BBOLD distance? $EBOLD $BR $BR
\{ 
BeginTable(border=>0, tex_border=>"1pt", spacing=>0, padding=>2, center=>0).
AlignedRow(["Option 1:","\( \displaystyle \| \textrm{proj}_{\vec{n}}\overrightarrow{AP} \| = \left\lVert \left( \frac{\vec{n} \bullet \overrightarrow{AP}}{\overrightarrow{AP} \bullet \overrightarrow{AP}} \right) \overrightarrow{AP} \right\lVert = \frac{ | \vec{n} \bullet \overrightarrow{AP} | }{ \| \overrightarrow{AP} \| } \)"], align=>LEFT, separation=>0).

AlignedRow([""], align=>LEFT, separation=>0).

AlignedRow(["Option 2:","\( \displaystyle \| \textrm{proj}_{\vec{n}}\overrightarrow{AP} \| = \left\lVert \left( \frac{\overrightarrow{AP} \bullet \vec{n}}{\vec{n} \bullet \vec{n}} \right) \vec{n} \right\lVert  = \frac{ | \overrightarrow{AP} \bullet \vec{n} | }{ \| \vec{n} \| } \)"], align=>LEFT, separation=>0).

EndTable()
\}
$BR $BR
The correct formula is $BBOLD Option $EBOLD \{ ans_rule(2) \} ($BITALIC enter the number corresponding to the chosen option $EITALIC) $BR

END_TEXT
Context()->normalStrings;

ANS($A->cmp);
ANS($AP->cmp);

ANS(Compute("2")->cmp );

Section::End();

Section::Begin(" ");

Context("Vector");
Context()->{cmpDefaults}{Vector} = {promotePoints => 1};
Context()->lists->set(Vector=>{open=>'(', close=>')'});
$AbsDotProduct = abs($AP.$N);
$NormN = norm($N);

Context("Numeric");
$Distance = $AbsDotProduct/$NormN;

Context()->texStrings;
BEGIN_TEXT
We have
\{ 
BeginTable(border=>0, tex_border=>"1pt", spacing=>0, padding=>2, center=>0).
AlignedRow(["\( \text{d} \big( \ell,\Phi \big) \) ","\( = \)","\( \displaystyle \frac{ | \overrightarrow{AP} \bullet \vec{n} | }{ \| \vec{n} \| } \)"], align=>LEFT, separation=>0).

AlignedRow([" ","\( = \)",ans_rule(15).$BR.$HR.ans_rule(15),"(write the appropriate numerical values)"], align=>LEFT, separation=>0).

AlignedRow([" ","\( = \)",ans_rule(15),"(compute the distance)"], align=>LEFT, separation=>0).

EndTable()
\}
$BR $BR
END_TEXT
Context()->normalStrings;

ANS($AbsDotProduct->cmp);
ANS($NormN->cmp);
ANS($Distance->cmp);

Section::End();
###########################################

Scaffold::End();

ENDDOCUMENT();
