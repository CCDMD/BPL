##Ressource produite dans le cadre du projet Mathéma-TIC (Samuel Bernard - 
#Cégep régional de Lanaudière à Terrebonne, et Bruno Poellhuber - Université de 
#Montréal), financé par le programme d’arrimage universités-collèges (PCUC) du 
#ministère de l'Enseignement supérieur, de la Recherche et de la Science du 
#Québec (MESRS) ainsi que par le Collège de Maisonneuve.

## DBsubject(Algèbre linéaire)
## DBchapter(Programmation linéaire)
## KEYWORDS('applications', 'deux variables', 'domaine admissible', 'fonction économique', 'minimisation', 'optimisation sous contrainte dans le plan', 'polygone convexe')
## Adaptation(Mélisande Fortin Boisvert - Collège de Maisonneuve)
## Traduction française : Sylvie Charbonneau
##########################################SOURCE##############
## ZInstitution(ASU)
##########################################SOURCE##############
##level(3)
##Language(fr)

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"contextLimitedPoint.pl",
"PGcourse.pl"
);


Context("LimitedPoint");
Context()->variables->add(y=>"Real");
Context()->noreduce('(-x)-y','(-x)+y');  
$showPartialCorrectAnswers = 0;


$s1 = random(3,9);
$s2 = random(2,$s1-1);
$s3 = random(1,$s2-1);

#slopes of the constraints lines: dyi/dxi = si/(10-si), i=1,2,3

$t1 = random(40,60); $dx1 = $t1*(10-$s1); $dy1 = $t1*$s1;
$t2 = random(40,60); $dx2 = $t2*(10-$s2); $dy2 = $t2*$s2;
$t3 = random(40,60); $dx3 = $t3*(10-$s3); $dy3 = $t3*$s3;

# coordinates of corner points: (0,y1),(x2,y2),(x3,y3),(x4,0)

$x1 = 0; $y1 = $dy1+$dy2+$dy3;
$x2 = $dx1; $y2 = $dy2+$dy3;
$x3 = $dx1+$dx2; $y3 = $dy3;
$x4 = $dx1+$dx2+$dx3; $y4 = 0;

$P1=Point(0,$dy1+$dy2+$dy3);
$P2=Point($dx1,$dy2+$dy3);
$P3=Point( $dx1+$dx2,$dy3);
$P4=Point($dx1+$dx2+$dx3,0);
$rep= List( $P1, $P2, $P3, $P4 );

# vit1/vit2 = smallest constraint slope cal1/cal2= largest constraints slope

$vit1 = $s3;
$vit2 = 10-$s3;
$min1 =  $s2;
$min2 = 10-$s2;
$cal1 = $s1;
$cal2 = 10 - $s1;

# coefficients of cost function: c1 and c2, chosen so that c1/c2 does not
# equal the slope of any other constraint.

$c1 = random(1,9)/100;
do {$c2 = random(1,9)/100;} until ($c1*(10-$s1) != $c2*$s1 & $c1*(10-$s2) != $c2*$s2 & $c1*(10-$s3)  != $c2*$s3 );


# determine constraints right hand side specified by corner points

$vit = $vit1*$x4;
$min = $min1*$x2+$min2*$y2;
$cal = $cal2*$y1;


$zmin = $c1*0+$c2*$y1;
$xmin = 0;
$ymin = $y1;
$z = $c1*$x2+$c2*$y2;
if ($z < $zmin) {$zmin=$z,$xmin=$x2,$ymin=$y2;}
$z = $c1*$x3+$c2*$y3;
if ($z < $zmin){$zmin=$z,$xmin=$x3,$ymin=$y3;}
$z = $c1*$x4;
if ($z < $zmin){$zmin=$z,$xmin=$x4,$ymin=0;}
$zzmin=Compute("$zmin");
$yymin=Compute("$ymin");
$xxmin=Compute("$xmin");



TEXT(beginproblem());
Context()->texStrings;
BEGIN_TEXT

Un certain régime alimentaire doit contenir au moins $vit unités de glucides, 
$min unités de protéines et $cal calories.
Deux aliments sont offerts : \(F_1 \), qui coûte
$DOLLAR $c1 par unité et  \( F_2 \), qui coûte $DOLLAR $c2 par unité.
Une unité de l'aliment \(F_1 \) fournit  $vit1 unités de glucides,  $min1 unités de protéines et $cal1 calories. Une unité de l'aliment \(F_2 \) fournit
$vit2 unités de glucides, $min2 unités de protéines et $cal2 calories.
$BR$BR
Déterminer le coût minimal d'un régime alimentaire qui combine ces deux aliments et qui respecte les quantités minimales d'apport énergétique.
$BR
$BR
Points extrémaux de la région admissible : $SPACE \{ans_rule(40)\}
$BR
S'il y a plusieurs points, les séparer par des virgules
(par exemple : (1,2),(3,4)).
$BR
$BR
Le coût minimal est :  \{ans_rule(15) \} $SPACE $DOLLAR
$BR
en utilisant $SPACE \{ans_rule(15) \}  unités  de \(F_1\) 
$BR
 et  $SPACE  \{ans_rule(15) \} unités  de \(F_2\).

END_TEXT
Context()->normalStrings;

ANS($rep->cmp());

ANS($zzmin->cmp());
ANS($xxmin->cmp());
ANS($yymin->cmp());

ENDDOCUMENT();        # This should be the last executable line in the problem.




