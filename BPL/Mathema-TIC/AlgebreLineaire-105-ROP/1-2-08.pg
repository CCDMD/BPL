#Ressource produite dans le cadre du projet Mathéma-TIC (Samuel Bernard - 
#Cégep régional de Lanaudière à Terrebonne, et Bruno Poellhuber - Université de 
#Montréal), financé par le programme d’arrimage universités-collèges (PCUC) du 
#ministère de l'Enseignement supérieur, de la Recherche et de la Science du 
#Québec (MESRS) ainsi que par le Collège de Maisonneuve.
## DBsubject(Algèbre linéaire)
## DBchapter(Programmation linéaire)
## KEYWORDS('contraintes', 'fonction économique', 'maximisation', 'simplexe', 'trois variables', 'variable d\'écart')
## Adaptation(Mélisande Fortin Boisvert - Collège de Maisonneuve)
## Traduction française : Sylvie Charbonneau
##########################################SOURCE##################
## ZInstitution(ASU)
## ZMLT(up)

##########################################SOURCE##################
##Level(1)
##Language(fr)

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"PGcourse.pl",

"PGmatrixmacros.pl",
);

TEXT(beginproblem());
  Context("Matrix");
  
  
for $j (0..10) { $a[$j] = random(2, 15);}
$b = random(10, 90, 5);
$c = random(20, 60, 4);
$AA = Matrix([ $a[2], -1, $a[3], 1, 0, 0,$b],
[ 1, $a[4], -$a[5], 0, 1,0, $c],
[ -$a[0], -$a[1], -1, 0,0,1,0]);



 $rep1=$AA->element(1,1);
  $rep2 = $AA->element(1,2);
   $rep3 = $AA->element(1,3);
    $rep4 = $AA->element(1,4);
	 $rep5 = $AA->element(1,5);
	  $rep6 = $AA->element(1,6);
	   $rep7 = $AA->element(1,7);
	   
	   
$rep8=$AA->element(2,1);
  $rep9 = $AA->element(2,2);
   $rep10 = $AA->element(2,3);
    $rep11 = $AA->element(2,4);
	 $rep12 = $AA->element(2,5);
	  $rep13 = $AA->element(2,6);
	   $rep14 = $AA->element(2,7);
	   
	   
$rep15=$AA->element(3,1);
  $rep16 = $AA->element(3,2);
   $rep17 = $AA->element(3,3);
    $rep18 = $AA->element(3,4);
	 $rep19 = $AA->element(3,5);
	  $rep20 = $AA->element(3,6);
	   $rep21 = $AA->element(3,7);	 
	   
 $rrep1 = Compute("$rep1");
 $rrep2 = Compute("$rep2");
 $rrep3 = Compute("$rep3");
 $rrep4 = Compute("$rep4");
 $rrep5 = Compute("$rep5");
 $rrep6 = Compute("$rep6");
 $rrep7 = Compute("$rep7");

 $rrep8 = Compute("$rep8");
 $rrep9 = Compute("$rep9");
 $rrep10 = Compute("$rep10");
 $rrep11 = Compute("$rep11");
 $rrep12 = Compute("$rep12");
 $rrep13 = Compute("$rep13");
 $rrep14 = Compute("$rep14");

  $rrep15 = Compute("$rep15");
 $rrep16 = Compute("$rep16");
 $rrep17 = Compute("$rep17");
 $rrep18 = Compute("$rep18");
 $rrep19 = Compute("$rep19");
 $rrep20 = Compute("$rep20");
 $rrep21 = Compute("$rep21");





Context()->texStrings;
BEGIN_TEXT
Soit le problème d'optimisation suivant.
$BR$BR
Maximiser \[p= $a[0] x_1 + $a[1] x_2 + x_3 \] 
sous les contraintes $BR$BR \[ \left\lbrace  \begin{array}{rcl}
 $a[2] x_1  -  x_2 +  $a[3] x_3 & \le & $b \\
 x_1  +  $a[4] x_2 -  $a[5] x_3 & \le & $c \\
 x_1&\ge& 0 \\ x_2& \ge& 0 \\ x_{3}& \ge & 0\\
\end{array} \right. \]
Ajouter des variables d'écart et remplir le tableau du simplexe initial ci-dessous.  Respecter l'ordre ci-dessus dans les contraintes; ne pas les replacer dans un autre ordre.
$BCENTER
\{ display_matrix([
[ans_rule(5), ans_rule(5),ans_rule(5),ans_rule(5),ans_rule(5),ans_rule(5),ans_rule(5)],
[ans_rule(5), ans_rule(5),ans_rule(5),ans_rule(5),ans_rule(5),ans_rule(5),ans_rule(5)],
'hline',
[ans_rule(5), ans_rule(5),ans_rule(5),ans_rule(5),ans_rule(5),ans_rule(5),ans_rule(5)]],
align=>'ccccc|c|c',
'top_labels'=>[ 'x_1','x_2','x_3','e_1','e_2','p','b']
) \}
$ECENTER


$BBOLD REMARQUE: $EBOLD la convention choisie par l'auteur est celle de poser la fonction économique \( p\) égale à \(+1\). 
END_TEXT
Context()->normalStrings;




ANS($rrep1->cmp());
ANS($rrep2->cmp());
ANS($rrep3->cmp());
ANS($rrep4->cmp());
ANS($rrep5->cmp());
ANS($rrep6->cmp());
ANS($rrep7->cmp());

ANS($rrep8->cmp());
ANS($rrep9->cmp());
ANS($rrep10->cmp());
ANS($rrep11->cmp());
ANS($rrep12->cmp());
ANS($rrep13->cmp());
ANS($rrep14->cmp());

ANS($rrep15->cmp());
ANS($rrep16->cmp());
ANS($rrep17->cmp());
ANS($rrep18->cmp());
ANS($rrep19->cmp());
ANS($rrep20->cmp());
ANS($rrep21->cmp());







ENDDOCUMENT();        # This should be the last executable line in the problem.
