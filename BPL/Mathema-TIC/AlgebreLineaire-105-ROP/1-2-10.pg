#Ressource produite dans le cadre du projet Mathéma-TIC (Samuel Bernard - 
#Cégep régional de Lanaudière à Terrebonne, et Bruno Poellhuber - Université de 
#Montréal), financé par le programme d’arrimage universités-collèges (PCUC) du 
#ministère de l'Enseignement supérieur, de la Recherche et de la Science du 
#Québec (MESRS) ainsi que par le Collège de Maisonneuve.

## DBsubject(Algèbre linéaire)
## DBchapter(Programmation linéaire)
## KEYWORDS('deux variables', 'fonction économique', 'maximisation', 'pivot', 'pivotage', 'simplexe', 'trois variables')
## Adaptation(Mélisande Fortin Boisvert - Collège de Maisonneuve)
## Traduction française : Sylvie Charbonneau
##########################################SOURCE##################
## ZInstitution(ASU)
## ZMLT(state)
##########################################SOURCE##################
##Level(1)
##Language(fr)

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"PGcourse.pl",
"PGchoicemacros.pl",
"LinearProgramming.pl",
"PGmatrixmacros.pl",
);


TEXT(beginproblem());
$showPartialCorrectAnswers=0;
install_problem_grader(~~&std_problem_grader);


$tops1 = ['p', 'x_1', 'x_2', 'e_1', 'e_2', 'b'];
$tops2 = ['p', 'x_1', 'x_2', 'x_3', 'e_1', 'e_2', 'e_3', 'b'];


@base = (1,2,3,4,5,6,7,8,9,10);

$sys1 = [[0, 0, -random(2,20), 1, 0, random(15, 45)],
[0, -random(2,20), random(2,20), 0, 1, random(15, 80)],
[1, random(2,20), -random(2,20), 0, 0, 0]]; # pivot


$sys2 = [[0, 0, -random(2,20), 1, 0, random(15, 45)],
[0, random(2,20), -random(2,20), 0, 1, random(15, 80)],
[1, random(2,20), -random(2,20), 0, 0, 0]]; #unbounded

@sl = (0, @base[NchooseK(4,4)], 5);
for $jj (0..2) {
  $sys2->[$jj] = [ @{$sys2->[$jj]}[@sl] ];
}
$sys2->[2][5] = random(12,75);

$sys3 = [[0, new Fraction(17,random(2,5)), -random(2,20), 1, 0, random(15, 45)],
[0, new Fraction(11, random(2,5)), 0, 0, 1, random(15, 80)],
[1, random(2,20), random(2,20), 0, 0, 0]]; #unbounded

@sl = (0, @base[NchooseK(4,4)], 5);
for $jj (0..2) {
  $sys3->[$jj] = [ @{$sys3->[$jj]}[@sl] ];
}
$sys3->[2][5] = random(12,75);

$sys4 = [
[0, -random(2,20), 0,            random(2,20), 1, 0,0, random(15, 45)],
[0, 0,             random(2,20),-random(2,20), 0, 1,0, random(15, 80)],
[0, -random(2,20), random(2,20),random(2,20),  0, 0,1, random(15, 80)],
[1,  random(2,20), -random(12,20),-random(2,11),0, 0,0,random(12,75)]]; # pivot

@sl = (0, @base[NchooseK(6,6)], 7);
for $jj (0..3) {
  $sys4->[$jj] = [ @{$sys4->[$jj]}[@sl] ];
}
##############################

@mc=();
$dop = "Il faut un autre pivotage.";
$fin = "Tableau final; le problème a une solution.";
$unb = "Ce tableau indique que le problème n'a aucune solution.";

$m = new_multiple_choice();
$m->qa("\[ ". lp_display_mm($sys1, top_labels=>$tops1) ."\]",
$dop);
$m->makeLast($dop, $fin, $unb);
push @mc, $m;

$m = new_multiple_choice();
$m->qa("\[ ".lp_display_mm($sys2, top_labels=>$tops1) ." \]",
$unb);
$m->makeLast($dop, $fin, $unb);
push @mc, $m;

$m = new_multiple_choice();
$m->qa("\[ ". lp_display_mm($sys3, top_labels=>$tops1) ." \]",
$fin);
$m->makeLast($dop, $fin, $unb);
push @mc, $m;
@mc = @mc[NchooseK(3,3)];

$m = new_multiple_choice();
$m->qa("\[ ". lp_display_mm($sys4, top_labels=>$tops2) ." \]",
$dop);
$m->makeLast($dop, $fin, $unb);



Context()->texStrings;
BEGIN_TEXT
Pour chaque tableau du simplexe, déterminer s'il faut effectuer un autre pivotage, si le tableau indique que le problème n'a aucune solution ou s'il s'agit du tableau final (c'est-à-dire que le problème de programmation linéaire a une solution).
$BR

	$BR$BR
\{ $mc[0]->print_q() \}
$BR
\{ $mc[0]->print_a() \}
$BR $HR $BR
\{ $mc[1]->print_q() \}
$BR
\{ $mc[1]->print_a() \}
$BR $HR $BR
\{ $mc[2]->print_q() \}
$BR
\{ $mc[2]->print_a() \}
$BR $HR $BR
\{ $m->print_q() \}
$BR
\{ $m->print_a() \}
END_TEXT
Context()->normalStrings;
#
# Tell WeBWork how to test if answers are right.  These should come in the
# same order as the answer blanks above.  You tell WeBWork both the type of
# "answer evaluator" to use, and the correct answer.
#

ANS(radio_cmp($mc[0]->correct_ans));
ANS(radio_cmp($mc[1]->correct_ans));
ANS(radio_cmp($mc[2]->correct_ans));
ANS(radio_cmp($m->correct_ans));

ENDDOCUMENT();        # This should be the last executable line in the problem.

